{
    "contents" : "install.packages('randomForest')\ninstall.packages('neuralnet')\ninstall.packages('nnet')\nrequire('neuralnet')\nrequire('nnet')\nrequire('randomForest')\nrequire('stringr')\nset.seed(2000)\n\nage.replace <- function(data){\n  data$Est.Age <- data$Age\n  for (title in levels(data$Title)){\n    ave <- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)\n    data$Est.Age[(data$Title %in% c(title)) & (is.na(data$Est.Age))]<- ave\n  }\n  age.replace <- data\n}\n\nmissingfactor <- function(fact){\n  temp <- as.character()\n}\n\nconvertToFactors <- function(data){\n  data <- age.replace(data)\n  data$Title <- as.factor(str_extract(data$Name,'(M[a-z]{1,})\\\\.'))\n  data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))\n  data$SibSp.factor <- factor(data$SibSp)\n  data$Pclass.factor <- factor(data$Pclass)\n  data$Parch.factor <- factor(data$Parch)\n  data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))\n  data$Age.factors[is.na(data$Age.factors)] <- \"Missing\"\n  data$Age.factors <- as.factor(data$Age.factors)\n  data$Est.Age.factors <- as.character(cut(data$Est.Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))\n  data$Est.Age.factors[is.na(data$Est.Age.factors)] <- \"Missing\"\n  data$Est.Age.factors <- as.factor(data$Est.Age.factors)\n  convertToFactors <- data\n}\n\ntestSolution <- function(model, testset, cutoff = 0.5){\n  values <- predict(model, newdata=testset,type = \"response\") \n  values[is.na(values)] <- 0\n  values.bin <- (values>=cutoff)==testset$Survived\n  testSolution <- sum(values.bin)/nrow(testset)\n}\n\ntrain <- read.csv('train.csv')\ntest <- read.csv('test.csv')\n\ntest <- convertToFactors(test)\ntrain <- convertToFactors(train)\ntrain$Survived.factor <- as.factor(train$Survived)\n\ntrain.idx <- sample(nrow(train),ceiling(nrow(train)*0.7))\ntest.idx <- (1:nrow(train))[-train.idx]\n\n#train.imputed <- rfImpute(Survived.factor ~ Pclass.factor + Sex + Age.factors+Fare+Embarked + Parch,train, ntree = 2000)\n#train.imputednn <- rfImpute(Survived ~ Pclass+ Sex + Age +Fare+Embarked + Parch,train, ntree = 2000)\n\n#mod.logit1 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = \"logit\"))\nmod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title + Fair.bin, data = train, family = binomial(link = \"logit\"))\nmod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = \"logit\"))\nmod.probit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train[train.idx,], family = binomial(link = \"probit\"))\n\nmod.logitimpute <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked, data = train.imputed[train.idx,], family = binomial(link = \"logit\"))\nmod.randforest <- randomForest(Survived.factor ~ Pclass.factor + Sex + Age.factors, data = train.imputed[train.idx,], ntree = 2000)\n\nmod.nnet <- neuralnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,hidden=5)\nmod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,subset = train.idx,size = 15,decay=0.1,maxit=1000)\n\nprint(testSolution(mod.nnet,train[test.idx,],cutoff=0.5))\n\np <- as.numeric(predict(mod.nnet,train[test.idx,])>0.5) == train[test.idx,]$Survived\n\nprint(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))\nprint(testSolution(mod.probit,train[test.idx,],cutoff=0.5))\nprint(testSolution(mod.logitimpute,train[test.idx,],cutoff=0.5))\nprint(testSolution(mod.randforest,train[test.idx,],cutoff=0.5))\n\ntest$Survived <- predict(mod.logit2, newdata=test,type = \"response\")\ntest$Survived.binary <- 0\ntest$Survived.binary[test$Survived>0.5] <- 1\ntest$Survived <- test$Survived.binary\n\nwrite.table(test[,c(\"PassengerId\",\"Survived\")], file=\"predictionslogit.csv\",sep = \",\",row.names=FALSE,col.names = TRUE)\n\n#create a Surv object\ns <- with(train[train.idx,],Surv(Age,Survived))\n\n#plot kaplan-meier estimate, per sex\nfKM <- survfit(s ~ Sex ,data=train[train.idx,])\nplot(fKM)\n\n#plot Cox PH survival curves, per sex\nsCox <- coxph(s ~ Sex,data=train[train.idx,])\nlines(survfit(sCox,train[test,]),col='blue')\nlines(survfit(sCox,newdata=data.frame(Sex='female',Pclass=1)),col='green')\n\n#plot weibull survival curves, per sex,\nsWei <- survreg(s ~ Sex + Pclass,dist='weibull',data=train[train.idx,])\nsWei1 <- survreg(s ~ Pclass.factor*Sex*Age+Fare+Embarked,dist='weibull',data=train[train.idx,])\n\nlines(predict(sWei, newdata=list(Sex='male', Pclass=3),type=\"quantile\",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col=\"red\")\nlines(predict(sWei, newdata=list(Sex='female'),type=\"quantile\",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col=\"red\")",
    "created" : 1382374092381.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "18|32|20|0|\n38|55|43|0|\n",
    "hash" : "3589194383",
    "id" : "5B29FDF1",
    "lastKnownWriteTime" : 1382395268,
    "path" : "~/programming/titanic/process.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}