install.packages('nnet')
require('nnet')
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,decay=0.1)
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,size = 5,decay=0.1)
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,size = 5,decay=0.1,maxit=1000)
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,size = 10,decay=0.1,maxit=1000)
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,size = 15,decay=0.1,maxit=1000)
mod.nnet <- nnet(Survived ~ Age + Pclass +Fare  + Parch, data = train.imputednn,subset = train.idx,size = 15,decay=0.1,maxit=1000)
print(testSolution(mod.nnet,train[test.idx,],cutoff=0.5))
p <- predict(mod.nnet,train[test.idx,])
View(p)
p <- predict(mod.nnet,train[test.idx,])>0.5
View(p)
p <- as.numeric(predict(mod.nnet,train[test.idx,])>0.5)
a
p
p <- as.numeric(predict(mod.nnet,train[test.idx,])>0.5) == train[test.idx,]$Surived
a
p
train[test.idx,]$Surived
train[test.idx,]
train[test.idx,]$Survived
p <- as.numeric(predict(mod.nnet,train[test.idx,])>0.5) == train[test.idx,]$Survived
p
p[is.na(p)] <- FALSE
p
p <- as.numeric(predict(mod.nnet,train[test.idx,])>0.5)
p
p[is.na(p)] <- 0
len(p)
length(p)
sum(p==train[test.idx,]$Survived)/length(p)
View(test)
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- cut(data$Age,breaks=5)
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
convertToFactors <- data
}
test <- convertToFactors(test)
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- cut(data$Age,breaks=5)
data$Age.factors[is.na(data$Age.factors),] <- "Missing"
convertToFactors <- data
}
test <- convertToFactors(test)
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- cut(data$Age,breaks=5)
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
convertToFactors <- data
}
train <- convertToFactors(train)
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=5))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=5))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
mod.logit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = "logit"))
train$Survived.factor <- as.factor(train$Survived)
mod.logit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = "logit"))
print(testSolution(mod.logit,train[test.idx,],cutoff=0.5))
View(test)
mod.probit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train[train.idx,], family = binomial(link = "probit"))
print(testSolution(mod.probit,train[test.idx,],cutoff=0.5))
mod.logit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train[train.idx,], family = binomial(link = "logit"))
print(testSolution(mod.logit,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train[train.idx,], family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
test$Survived <- predict(mod.logit2, newdata=test,type = "response")
levels(train$Age.factors)
?cut
convertToFactors <- function(data){
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
train.idx <- sample(nrow(train),ceiling(nrow(train)*0.7))
test.idx <- (1:nrow(train))[-train.idx]
train.imputed <- rfImpute(Survived.factor ~ Pclass.factor + Sex + Age.factors+Fare+Embarked + Parch,train, ntree = 2000)
train.imputednn <- rfImpute(Survived ~ Pclass+ Sex + Age +Fare+Embarked + Parch,train, ntree = 2000)
#mod.logit1 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
mod.probit <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch, data = train[train.idx,], family = binomial(link = "probit"))
convertToFactors <- function(data){
data$Name <- sub('(M[a-z]{1,})\.','\1')
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
convertToFactors <- function(data){
#data$Name <- sub('(M[a-z]{1,})\.','\1')
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
convertToFactors <- function(data){
data$Name <- sub('(M[a-z]{1,})\.','\1',data$Name)
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
convertToFactors <- function(data){
data$Name <- sub('(M[a-z]{1,})\\.','\\1',data$Name)
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
test <- convertToFactors(test)
train <- convertToFactors(train)
View(train)
convertToFactors <- function(data){
data$Name1 <- sub('(M[a-z]{1,})\\.','\\1',data$Name)
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
View(test)
library(stringr)
convertToFactors <- function(data){
data$Name1 <- str_extract(data$Name,'(M[a-z]{1,})\\.')
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
test <- convertToFactors(test)
train <- convertToFactors(train)
View(test)
View(train)
convertToFactors <- function(data){
data$Title <- str_extract(data$Name,'(M[a-z]{1,})\\.')
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
train.idx <- sample(nrow(train),ceiling(nrow(train)*0.7))
test.idx <- (1:nrow(train))[-train.idx]
train.imputed <- rfImpute(Survived.factor ~ Pclass.factor + Sex + Age.factors+Fare+Embarked + Parch,train, ntree = 2000)
train.imputednn <- rfImpute(Survived ~ Pclass+ Sex + Age +Fare+Embarked + Parch,train, ntree = 2000)
#mod.logit1 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
test$Survived <- predict(mod.logit2, newdata=test,type = "response")
test$Survived.binary <- 0
test$Survived.binary[test$Survived>0.5] <- 1
test$Survived <- test$Survived.binary
write.table(test[,c("PassengerId","Survived")], file="predictionslogit.csv",sep = ",",row.names=FALSE,col.names = TRUE)
max(train$Fair)
convertToFactors <- function(data){
data$Title <- str_extract(data$Name,'(M[a-z]{1,})\\.')
data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
train.idx <- sample(nrow(train),ceiling(nrow(train)*0.7))
test.idx <- (1:nrow(train))[-train.idx]
#train.imputed <- rfImpute(Survived.factor ~ Pclass.factor + Sex + Age.factors+Fare+Embarked + Parch,train, ntree = 2000)
#train.imputednn <- rfImpute(Survived ~ Pclass+ Sex + Age +Fare+Embarked + Parch,train, ntree = 2000)
#mod.logit1 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch*Age.factors, data = train[train.idx,], family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title + Fair.bin data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title + Fair.bin, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor+Sex*Age.factors+Fare+Embarked + Parch + Title + Fair.bin, data = train, family = binomial(link = "logit"))
View(train)
mod.logit2 <- glm(Survived.factor~Fair.bin*Sex*Age.factors+Fare+Embarked + Parch + Title, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor+Sex+Age.factors+Fare+Embarked + Parch + Title, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Fair.bin, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Fair.bin*Sex, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Fair.bin*Sex + Title, data = train, family = binomial(link = "logit"))
View(test)
train <- as.factor(train$Title)
train <- read.csv('train.csv')
convertToFactors <- function(data){
data$Title <- as.factor(str_extract(data$Name,'(M[a-z]{1,})\\.'))
data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
train <- convertToFactors(train)
mod.logit2 <- glm(Survived.factor~Fair.bin*Sex + Title, data = train, family = binomial(link = "logit"))
train$Survived.factor <- as.factor(train$Survived)
mod.logit2 <- glm(Survived.factor~Fair.bin*Sex + Title, data = train, family = binomial(link = "logit"))
View(train)
mean(train$Age)
mean(train$Age,na.rm=TRUE)
mean(train[train$Title=="Master.",]$Age,na.rm=TRUE)
levels(train$Title)
summary(train[train$Title=="Master.",]$Age,na.rm=TRUE)
summary(train[train$Title=="Mlle",]$Age,na.rm=TRUE)
summary(train[train$Title=="Mme",]$Age,na.rm=TRUE)
summary(train[train$Title=="Mme",]$Sex,na.rm=TRUE)
summary(train[train$Title=="Mme",]$Sex)
summary(train[train$Title=="Major",]$Age)
summary(train[train$Title=="Miss",]$Age)
summary(train[train$Title=="Mr.",]$Age)
summary(train[train$Title=="Miss",]$Age,na.rm=TRUE)
View(train[train$Title=="Miss.",])
View(train[train$Title %in% "Miss.",])
summary(train[train$Title %in% "Miss.",]$Age)
View(train[train$Title %in% "Miss." & train$Age<10,])
levels(train$Title)
View(train[train$Title %in% "Major.",])
View(train[train$Title %in% "Mlle",])
View(train[train$Title %in% "Mme",])
age.replace <- function(data){
for title in levels(train$Title){
print(title)
}
}
age.replace <- function(data){
for (title in levels(data$Title)){
print(title)
}
}
age.replace(train)
age.replace <- function(data){
for (title in levels(data$Title)){
print(mean(data[data$Title %in% title,]$Age)
}
}
age.replace <- function(data){
for (title in levels(data$Title)){
print(mean(data[data$Title %in% title,]$Age))
}
}
age.replace(train)
age.replace <- function(data){
for (title in levels(data$Title)){
print(mean(data[data$Title %in% title,]$Age,na.rm=TRUE))
}
}
age.replace(train)
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
data$Est.Age[data$Title %in% title && is.na(data$Est.Age),]<- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
}
}
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
data$Est.Age[data$Title %in% title && is.na(data$Est.Age),]<- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
}
age.replace <- data
}
convertToFactors <- function(data){
data <- age.replace(data)
data$Title <- as.factor(str_extract(data$Name,'(M[a-z]{1,})\\.'))
data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
convertToFactors <- data
}
train <- convertToFactors(train)
train <- age.replace(train)
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
ave <- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
data$Est.Age[data$Title %in% title & is.na(data$Est.Age),]<- ave
}
age.replace <- data
}
train <- age.replace(train)
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
ave <- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
data$Est.Age[data$Title %in% c(title) & is.na(data$Est.Age),]<- ave
}
age.replace <- data
}
train <- age.replace(train)
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
ave <- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
data$Est.Age[(data$Title %in% c(title)) & (is.na(data$Est.Age))]<- ave
}
age.replace <- data
}
train <- age.replace(train)
View(train)
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
convertToFactors <- function(data){
data <- age.replace(data)
data$Title <- as.factor(str_extract(data$Name,'(M[a-z]{1,})\\.'))
data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
data$Est.Age.factors <- as.character(cut(data$Est.Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Est.Age.factors[is.na(data$Est.Age.factors)] <- "Missing"
data$Est.Age.factors <- as.factor(data$Est.Age.factors)
convertToFactors <- data
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
train$Survived.factor <- as.factor(train$Survived)
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
test$Survived <- predict(mod.logit2, newdata=test,type = "response")
test$Survived.binary <- 0
test$Survived.binary[test$Survived>0.5] <- 1
test$Survived <- test$Survived.binary
write.table(test[,c("PassengerId","Survived")], file="predictionslogit.csv",sep = ",",row.names=FALSE,col.names = TRUE)
age.replace <- function(data){
data$Est.Age <- data$Age
for (title in levels(data$Title)){
ave <- mean(data[data$Title %in% title,]$Age,na.rm=TRUE)
data$Est.Age[(data$Title %in% c(title)) & (is.na(data$Est.Age))]<- ave
}
age.replace <- data
}
missingfactor <- function(fact){
temp <- as.character()
}
convertToFactors <- function(data){
data <- age.replace(data)
data$Title <- as.factor(str_extract(data$Name,'(M[a-z]{1,})\\.'))
data$Fair.bin <- cut(data$Fare,breaks=c(0,10,20,30,10000))
data$SibSp.factor <- factor(data$SibSp)
data$Pclass.factor <- factor(data$Pclass)
data$Parch.factor <- factor(data$Parch)
data$Age.factors <- as.character(cut(data$Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Age.factors[is.na(data$Age.factors)] <- "Missing"
data$Age.factors <- as.factor(data$Age.factors)
data$Est.Age.factors <- as.character(cut(data$Est.Age,breaks=c(0.34,16.3,32.2,48.2,64.1,80.1)))
data$Est.Age.factors[is.na(data$Est.Age.factors)] <- "Missing"
data$Est.Age.factors <- as.factor(data$Est.Age.factors)
convertToFactors <- data
}
testSolution <- function(model, testset, cutoff = 0.5){
values <- predict(model, newdata=testset,type = "response")
values[is.na(values)] <- 0
values.bin <- (values>=cutoff)==testset$Survived
testSolution <- sum(values.bin)/nrow(testset)
}
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test <- convertToFactors(test)
train <- convertToFactors(train)
train$Survived.factor <- as.factor(train$Survived)
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Age.factors+Fare+Embarked + Parch + Title + Fair.bin, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch + Fair.bin, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "probit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
mod.logit2 <- glm(Survived.factor~Pclass.factor*Sex*Est.Age.factors+Fare+Embarked + Parch, data = train, family = binomial(link = "logit"))
print(testSolution(mod.logit2,train[test.idx,],cutoff=0.5))
test$Survived <- predict(mod.logit2, newdata=test,type = "response")
test$Survived.binary <- 0
test$Survived.binary[test$Survived>0.5] <- 1
test$Survived <- test$Survived.binary
write.table(test[,c("PassengerId","Survived")], file="predictionslogit.csv",sep = ",",row.names=FALSE,col.names = TRUE)
test$Survived <- predict(mod.logit2, newdata=test,type = "response")
test$Survived.binary <- 0
test$Survived.binary[test$Survived>0.5] <- 1
test$Survived <- test$Survived.binary
write.table(test[,c("PassengerId","Survived")], file="predictionslogit.csv",sep = ",",row.names=FALSE,col.names = TRUE)
